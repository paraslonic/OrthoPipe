use DBI;
use Bio::SeqIO;
use File::Basename;

my $fin = shift or die "[genbank file]";
$name = fileparse($fin, qr/\.[^.]*/);
$in = Bio::SeqIO->new(-file => $fin, -format => 'Genbank');

my $dbh;

&connectDB;
&createTables;

$i = 0;
my $sth = $dbh->prepare("insert into cds_nuc(strain, id, product, length, contig, start, stop, seq) values (?,?,?,?,?, ?, ?, ?)");

while (my $seq = $in->next_seq()) {
        $contig = $seq->display_id();
        my @cds = grep { $_->primary_tag eq 'CDS' } $seq->get_SeqFeatures();
        foreach my $feature (@cds) {
                if($feature->has_tag('translation') ){
                        my @fseq = $feature->get_tag_values('translation');
                        my @prod = $feature->get_tag_values('product');
                        my @locus = $feature->location;
                        $prod = $prod[0];
                        $sequence = $feature->spliced_seq->seq();
                        #$prod =~ s/\s/_/g;
                        $sth->execute($name, $i++, $prod, length($sequence), $contig, $feature->start, $feature->end, $sequence); 
                }
        }
}

print "\nTHE END.\n" ;
 
 # .............................................................................................................................................................  SUBROUTINE
 
 sub connectDB{
 	$dbConnectString="dbi:mysql:pstutprok2:mysql_local_infile=1:localhost";
	$dbLogin=root;
	$dbPassword=111111;
	$dbh = DBI->connect($dbConnectString, $dbLogin,$dbPassword) or die "Could not connect to database: $DBI::errstr";
 }
 
 sub createTables{
 	# .................... create tables
	my $sql = "create table if not exists cds_nuc(
		strain varchar(256),
		id integer,
		product varchar(1000),
		length integer,
		contig varchar(256),
		start integer,
		stop integer,
		seq varchar(20000),
		#dnaseq varchar(20000),
		primary key (strain, id) )";
	$dbh->do($sql);
}
